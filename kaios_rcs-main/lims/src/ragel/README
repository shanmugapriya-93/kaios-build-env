
                    Ragel for Ecrio Module Parser -- README
                    =======================================

1. What's the purpose of "Ragel" directory?
-------------------------------------------

The Ecrio Module Parser has parsing algorithm which generated by Ragel State
Machine Compiler, the source code stores in this "Ragel" directory.

The .rl file is C source code which embedded Ragel language for specifying state
machines, The Ragel compiler assembles a state machine definition to executable
C source code.

When we want to update the Ecrio Module Parser by modifying or adding procedure
for parsing message, it need to edit .rl file and after that need to re-compile
on Ragel to generate C source code. Conversely, we don't need to edit a generated
C source code, this C source code is used only build the each module.


2. How to make Ragel State Machine Compiler
-------------------------------------------

We need to prepare the Ragel State Machine Compiler for Ragel compile. This is
provided by source code only, that is for Unix-like OS platform. The procedure
of making binary is below.

¥ Getting Ragel source code

It can pull from GitHub for Ragel (https://github.com/adrian-thurston/ragel).
The Ragel version which we use is the stable version (ragel-6.10) on 2021/05.
There will be deployed in "bin" directory, and we need to audit the stable
version.

To get the stable version code, use the following command:

$ git clone https://github.com/adrian-thurston/ragel.git -b ragel-6.10 --depth=1

¥ Ragel compile

If you install Ragel for the first time on your machine, it will need to have
Ragel of previous version installed once on machine. In that case, use the
following command to get it:

$ sudo apt-get install ragel
$ sudo apt-get install kelbt

The steps for compile is as follows:

-- -- 
$ cd bin/ragel-6.10
$ ./configure
$ make
$ sudo make install
$ which ragel
/usr/local/bin/ragel
$ ragel -v
Ragel State Machine Compiler version 6.10 March 2017
Copyright (c) 2001-2009 by Adrian Thurston
-- -- 


3. How to generate C source code
--------------------------------

To generate C source code using the Ragel State Machine Compiler, we need to
specify some compile options. The Ragel supports various source code type, so
we specify "-C" option for generating C source code. In addition, to inhibit
writing of #line directives, we also specify "-L" option.

Next, we specify the code style option. This is available below options:

   -T0      Table driven FSM (default)
   -T1      Faster table driven FSM
   -F0      Flat table driven FSM
   -F1      Faster flat table-driven FSM
   -G0      Goto-driven FSM
   -G1      Faster goto-driven FSM
   -G2      Really fast goto-driven FSM

The processing speed is fast toward the bottom but readability will be lost.
However, we don't need to edit the C source code which described on section 1,
so we specify "-G2" code style option.

Based on these, the command line for Ragel compilation is:

$ ragel -C -L -G2 EcrioSDPParse.rl
$ ragel -C -L -G2 EcrioSDPParseHeaderA.rl
$ ragel -C -L -G2 EcrioSDPParseHeaderA_AMR_parameters.rl
    ...

Then compile all the .rl file that exists in each directory. After that, we
need to merge the generated C code into .c file of the same name in each module
at src directory.
